.if-default-branch: &if-default-branch
  if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_MERGE_REQUEST_IID == null'

.if-release-branch: &if-release-branch
  if: '$CI_COMMIT_BRANCH =~ /^release[\/\-_].+$/'

.if-merge-request: &if-merge-request
  if: '$CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train"'

.if-merge-request-targeting-develop: &if-merge-request-targeting-develop
  if: '($CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_EVENT_TYPE != "merge_train") && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "develop"'

.if-schedule-pipeline: &if-schedule-pipeline
  if: '$CI_PIPELINE_SOURCE == "schedule"'

.if-force-pipeline: &if-force-pipeline
  if: '$FORCE_PIPELINE'

.if-build-ci-image: &if-build-ci-image
  if: '$BUILD_CI_IMAGE'

.npm-cache-patterns: &npm-cache-patterns
  - ".npm/"
  - "node_modules/"

.rules:default:
  rules:
    - <<: *if-merge-request
    - <<: *if-force-pipeline

.npm-cache-push:
  cache:
    - key: $CI_COMMIT_REF_SLUG
      paths: *npm-cache-patterns
      policy: push

.npm-cache-pull:
  cache:
    - key: $CI_COMMIT_REF_SLUG
      paths: *npm-cache-patterns
      policy: pull

variables:
  npm_config_cache: "$CI_PROJECT_DIR/.npm"
  CI_IMAGE: $CI_REGISTRY/hydrolix/grafana-datasource-plugin/ci:latest

build-ci-image:
  stage: prepare
  image: ubuntu:22.04
  tags: [forecast-small]
  rules:
    - <<: *if-build-ci-image
  script:
    - apt-get -q -y update
    - apt-get -y install docker.io
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f .gitlab/ci.Dockerfile -t $CI_IMAGE .
    - docker push $CI_IMAGE

build-frontend:
  extends:
    - .npm-cache-push
    - .rules:default
  stage: build
  image: $CI_IMAGE
  tags: [forecast-small]
  variables:
    ESLINT_CODE_QUALITY_REPORT: eslint_report.json
    JEST_JUNIT_OUTPUT_FILE: junit_report.json
  script:
    - npm install
    - npx eslint --cache --format gitlab --ignore-path ./.gitignore --ext .js,.jsx,.ts,.tsx .
    - npx tsc
    - npx jest --ci --reporters=default --reporters=jest-junit --collect-coverage --passWithNoTests
    - npm run build
  artifacts:
    paths:
      - dist/
    when: on_success
    expire_in: 1 hour
    reports:
      codequality: eslint_report.json
      junit: junit_report.xml

build-backend:
  extends:
    - .rules:default
  stage: build
  image: $CI_IMAGE
  tags: [forecast-small]
  script:
    - mage
  artifacts:
    paths:
      - dist/
    when: on_success
    expire_in: 1 hour

zip:
  extends:
    - .npm-cache-pull
    - .rules:default
  stage: package
  image: $CI_IMAGE
  needs: [build-frontend, build-backend]
  tags: [forecast-small]
  script:
    - PLUGIN_NAME=$(npm pkg get name | tr -d '"')
    - PLUGIN_VERSION=$(npm pkg get version | tr -d '"')
    - ZIP_NAME=$PLUGIN_NAME-$PLUGIN_VERSION.zip
    - mv dist/ $PLUGIN_NAME/
    - zip $ZIP_NAME $PLUGIN_NAME -r
  artifacts:
    paths:
      - "*.zip"
    when: on_success
    expire_in: 7 days

.e2e-base:
  image: $CI_IMAGE
  tags: [forecast-small]
  parallel:
    matrix:
      - E2E_GRAFANA_NAME: ["grafana-enterprise"]
        E2E_GRAFANA_VERSION: ["10.4.15", "11.5.1"]
  variables:
    E2E_IMAGE_NAME: e2e-$E2E_GRAFANA_NAME-$E2E_GRAFANA_VERSION
    E2E_IMAGE_TAG: $CI_COMMIT_SHA
    E2E_IMAGE: $CI_REGISTRY/hydrolix/grafana-datasource-plugin/$E2E_IMAGE_NAME:$E2E_IMAGE_TAG
    E2E_GRAFANA_URL: http://e2e:3000
    PLAYWRIGHT_JUNIT_OUTPUT_FILE: junit_report.xml

build-e2e-image:
  stage: test
  needs: [zip]
  extends:
    - .e2e-base
    - .npm-cache-pull
    - .rules:default
  script:
    - unzip "$(ls -1 *.zip | head -n 1)" -d .
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -f .gitlab/e2e.Dockerfile -t $E2E_IMAGE --build-arg E2E_GRAFANA_NAME=$E2E_GRAFANA_NAME --build-arg E2E_GRAFANA_VERSION=$E2E_GRAFANA_VERSION .
    - docker push $E2E_IMAGE

e2e:
  extends:
    - .e2e-base
    - .npm-cache-pull
    - .rules:default
  stage: test
  services:
    - name: $E2E_IMAGE
      alias: e2e
  needs: [build-e2e-image]
  script:
    - npx playwright install --with-deps
    - npx playwright test --reporter=junit
  artifacts:
    reports:
      junit: junit_report.xml

remove-e2e-image:
  extends:
    - .e2e-base
    - .npm-cache-pull
    - .rules:default
  stage: cleanup
  when: always
  script:
    - .gitlab/remove-image.sh "$CI_JOB_TOKEN" "$CI_PROJECT_ID" "$E2E_IMAGE_NAME" "$E2E_IMAGE_TAG"